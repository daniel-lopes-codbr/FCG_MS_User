// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using FCG_MS_Users.Infra;

#nullable disable

namespace FCG_MS_Users.Infra.Persistence.Migrations
{
    [DbContext(typeof(UserRegistrationDbContext))]
    partial class UserRegistrationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("game_platform")
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("UserRegistrationAndGameLibrary.Domain.Entities.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("CoverImageUrl")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("cover_image_url");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("genre");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("price");

                    b.Property<DateTime>("ReleasedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("release_date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("title");

                    b.HasKey("Id");

                    b.HasIndex("Genre");

                    b.HasIndex("ReleasedDate");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("games", "game_platform");
                });

            modelBuilder.Entity("UserRegistrationAndGameLibrary.Domain.Entities.GameLibrary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsInstalled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_installed");

                    b.Property<DateTime>("PurchaseDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("purchase_date")
                        .HasDefaultValueSql("now()");

                    b.Property<decimal>("PurchasePrice")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("purchase_price");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GameId")
                        .HasDatabaseName("ix_game_libraries_game_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_game_libraries_user_id");

                    b.HasIndex("UserId", "GameId")
                        .IsUnique()
                        .HasDatabaseName("ux_game_libraries_user_game");

                    b.ToTable("gamelibraries", "game_platform", t =>
                        {
                            t.HasCheckConstraint("ck_game_libraries_positive_price", "purchase_price >= 0");
                        });
                });

            modelBuilder.Entity("UserRegistrationAndGameLibrary.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreateAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("users", "game_platform");
                });

            modelBuilder.Entity("UserRegistrationAndGameLibrary.Domain.Entities.UserAuthorization", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Permission")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("permission");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("userAuthorizations", "game_platform");
                });

            modelBuilder.Entity("UserRegistrationAndGameLibrary.Domain.Entities.GameLibrary", b =>
                {
                    b.HasOne("UserRegistrationAndGameLibrary.Domain.Entities.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UserRegistrationAndGameLibrary.Domain.Entities.User", "User")
                        .WithMany("GameLibrary")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserRegistrationAndGameLibrary.Domain.Entities.User", b =>
                {
                    b.OwnsOne("UserRegistrationAndGameLibrary.Domain.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)")
                                .HasColumnName("email");

                            b1.HasKey("UserId");

                            b1.ToTable("users", "game_platform");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("UserRegistrationAndGameLibrary.Domain.ValueObjects.Password", "Password", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("HasedValue")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("password_hash");

                            b1.HasKey("UserId");

                            b1.ToTable("users", "game_platform");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Password")
                        .IsRequired();
                });

            modelBuilder.Entity("UserRegistrationAndGameLibrary.Domain.Entities.UserAuthorization", b =>
                {
                    b.HasOne("UserRegistrationAndGameLibrary.Domain.Entities.User", "User")
                        .WithOne("Authorization")
                        .HasForeignKey("UserRegistrationAndGameLibrary.Domain.Entities.UserAuthorization", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserRegistrationAndGameLibrary.Domain.Entities.User", b =>
                {
                    b.Navigation("Authorization")
                        .IsRequired();

                    b.Navigation("GameLibrary");
                });
#pragma warning restore 612, 618
        }
    }
}
